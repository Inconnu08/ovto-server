package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_initial_schema_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\xaa\x26\xb9\x28\x35\x25\x35\xaf\x24\x33\x31\x87\x90\xca\xb4\xfc\xfc\x94\x82\xa2\xfc\xb2\xcc\x94\xd4\x22\x02\x4a\x8b\x52\x8b\x4b\x4a\x13\x8b\x12\xf3\x4a\x08\x28\x4c\xcc\x4d\x4a\x2c\x2e\x4e\x4c\xc9\x47\x32\x11\x10\x00\x00\xff\xff\xe3\xba\xc0\xd2\xcb\x00\x00\x00")

func _1_initial_schema_down_sql() ([]byte, error) {
	return bindata_read(
		__1_initial_schema_down_sql,
		"1_initial_schema.down.sql",
	)
}

var __1_initial_schema_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x51\x6f\xe2\x38\x10\x7e\xe7\x57\x58\x7d\x0a\x12\x77\xa2\x48\x3c\x55\x77\x52\x4a\x5d\x35\x2a\x84\x5e\x08\xa7\x76\x5f\xa2\x21\x31\xa9\xd5\x60\x47\x63\x87\x8a\x7f\xbf\x0a\x09\x90\x84\x84\xc0\x6e\xbb\xdd\xe5\x75\xbe\xb1\x3d\xdf\x7c\xf3\x0d\x19\x39\xd4\x74\x29\xa1\xcf\x2e\xb5\x67\xd6\xd4\x26\x71\xe8\xe3\x26\xd6\xf2\xa6\x73\x14\xb2\xee\x89\x3d\x75\x09\x7d\xb6\x66\xee\x8c\x5c\x25\x09\x0f\xfe\x92\x4a\xc5\x57\x37\x9d\x1d\xd8\x35\x6f\xc7\xb4\x02\x4c\x14\x43\xd5\x31\x3a\x84\x10\xc2\x03\x52\xfa\xcd\xa8\x63\x99\x63\xb2\x85\xdb\xf3\xf1\x98\x3c\x39\xd6\xc4\x74\x5e\xc8\x23\x7d\xe9\x6d\x33\xd8\x0a\x78\x54\xc8\xf8\xdf\x74\x46\x0f\xa6\x73\xc8\x98\xdb\xd6\x7f\x73\x9a\x81\x97\x49\x14\x09\x58\xb1\x0a\xd8\xb8\x1e\xf6\xbb\xfb\x8c\x0c\x0a\x6b\xd0\x80\x47\xe7\xe6\xc1\x20\x40\xa6\x54\x35\x68\x0c\x86\xc3\x6e\x86\x88\x5f\xa5\x60\xc7\xcf\xca\x82\x3e\x32\xd0\x2c\xf0\x40\x67\x41\xd7\x9a\xd0\x99\x6b\x4e\x9e\xdc\x6f\x87\x77\xdf\xd1\x7b\x73\x3e\x76\x89\x90\xef\x46\xb7\xd3\x3d\xcd\xa1\x8f\x2c\x60\x42\x73\x88\x7e\x9c\xc9\xb4\x0f\x5e\x21\xcd\xb2\xdd\x03\xda\xa1\xf7\xd4\xa1\xf6\x88\xe6\xfd\xca\xab\x04\xa5\xde\x25\x06\x4d\xe4\x7f\x56\xb9\x4b\x29\x83\x18\xe5\x9a\x07\x0c\xbf\x56\x39\xc7\xc2\x69\xe8\x7c\xfd\xb1\x5f\x45\x20\xac\x16\xa0\x14\x04\xf2\xcf\xa6\x6f\xf1\x06\xea\xb5\x69\xca\x50\xfa\x6f\x4c\x37\x04\xcf\x23\x7e\x09\x3e\x5b\x48\xf9\xd6\xd2\x1e\xae\x37\xe4\xc4\x93\x73\xcf\x40\x06\x67\xa0\xea\x9d\xa5\x82\x42\xb6\x64\x88\x10\x79\xbe\x0c\x52\xb2\xd6\x80\xfe\x2b\x60\x3d\x49\x1f\xaf\x1e\x64\x4a\x43\x82\x20\x74\x83\x7a\xe6\x73\xeb\xae\x56\x3a\xfb\x7b\x42\x26\x3c\x04\x11\xc8\x95\x97\xee\x09\x23\xb7\x4d\xcd\x75\x54\xd3\xfd\x92\x4e\x4a\xc5\xc9\x77\x51\x72\xad\x26\xd3\x2a\x3a\xc6\x19\x06\xef\xcb\x35\xc3\x26\x61\xc1\x42\x26\xba\x29\x18\x49\x1f\x34\x97\xe2\xd7\x49\xc6\x97\x89\xd0\xb8\x69\x41\xb5\xcd\x55\x4e\x67\xcc\x04\x17\xa1\xa7\x79\x36\xab\x0d\x37\x46\x52\xb5\xa3\x0e\x1e\x93\xc9\xb4\x44\xd3\x1a\xb4\x87\x2c\xf4\x84\xac\xe1\x10\x41\x73\x11\x1e\xde\x7a\x47\x47\xd6\xc4\x1c\x1b\xd7\xbd\xeb\xee\x5e\x41\xfd\xbf\xfb\x64\xf4\x40\x47\x8f\xc4\xc8\xf1\xff\xfe\x43\xfa\xb9\x8e\xc0\xd7\x7c\x5d\x28\xf7\x76\x3a\x1d\x53\xd3\x3e\xd6\xbb\xc6\x84\x1d\x8a\x62\x9e\xd2\xa0\x13\x75\x6e\xca\x87\x4f\x56\xcc\x70\xc5\x95\xe2\x52\x34\x4c\x96\x65\xbb\x3b\x0b\xd8\xcd\x60\xa6\xfe\x74\xe4\xaa\x91\x53\x9d\x46\x59\x1a\xb4\xd2\xe0\xf4\x3a\x5b\x48\x71\x6e\x0d\x1e\xf4\xca\x77\x5e\xe0\x12\x5e\x08\x51\xc4\x70\x73\x72\xd7\x34\x97\x55\x3b\xd0\x07\x60\x96\xc8\x57\x10\xb6\xeb\xfb\xf2\x8e\xf5\x3e\x82\x0a\x1f\x34\x0b\x65\x0b\x01\x27\x76\x6d\xb5\xa5\x25\x56\x72\xdf\x81\x05\xab\x59\xc7\xc6\x60\x58\xf3\xcf\x96\x47\xb0\xe0\x51\xee\x41\x9f\x22\xf4\x5c\x42\x99\x55\x13\xa3\xd0\xad\xec\xa5\xad\x94\x71\xcd\x56\x3f\x4f\xd7\x85\x22\xda\xf5\x69\xb7\x50\xaa\x37\x15\x52\x77\xd0\x2c\xb1\xf8\xdf\xe6\x34\xfb\x01\x53\x3e\xf2\x78\xbf\x22\x8a\x9f\x0e\x55\xcb\x46\xee\x17\x4f\xdd\xdb\xe0\xa0\x37\xf8\xbd\x9a\xea\xa5\x23\x91\x72\x70\x56\x5b\x2f\xb0\x83\x2d\xfc\x8c\x6f\x92\x14\xf7\xd9\x3e\x50\x6f\x04\xf9\x0b\xd3\xc2\xbf\x07\x00\x00\xff\xff\x6d\xeb\x55\x5a\x2c\x0f\x00\x00")

func _1_initial_schema_up_sql() ([]byte, error) {
	return bindata_read(
		__1_initial_schema_up_sql,
		"1_initial_schema.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_initial_schema.down.sql": _1_initial_schema_down_sql,
	"1_initial_schema.up.sql": _1_initial_schema_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_initial_schema.down.sql": &_bintree_t{_1_initial_schema_down_sql, map[string]*_bintree_t{
	}},
	"1_initial_schema.up.sql": &_bintree_t{_1_initial_schema_up_sql, map[string]*_bintree_t{
	}},
}}
