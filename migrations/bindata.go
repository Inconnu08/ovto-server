package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_initial_schema_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\xaa\x26\xb9\x28\x35\x25\x35\xaf\x24\x33\x31\x87\x90\xca\xb4\xfc\xfc\x94\x82\xa2\xfc\xb2\xcc\x94\xd4\x22\x02\x4a\x8b\x52\x8b\x4b\x4a\x13\x8b\x12\xf3\x4a\x08\x28\x4c\xcc\x4d\x4a\x2c\x2e\x4e\x4c\xc9\x47\x32\x11\x10\x00\x00\xff\xff\xe3\xba\xc0\xd2\xcb\x00\x00\x00")

func _1_initial_schema_down_sql() ([]byte, error) {
	return bindata_read(
		__1_initial_schema_down_sql,
		"1_initial_schema.down.sql",
	)
}

var __1_initial_schema_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4d\x8f\xda\x30\x10\xbd\xf3\x2b\xac\x3d\x81\xd4\x4a\x55\x25\x4e\x7b\xca\xb2\x46\x8d\x1a\xc2\x36\x24\xd5\x6e\x2f\xd1\x10\x0f\x60\x11\x3c\xd1\xd8\x01\xf1\xef\x2b\x36\x69\xf9\x4a\x00\xad\xfa\x99\xeb\xbc\xb1\xc7\xef\xbd\x79\x19\x44\xd2\x8b\xa5\x90\xcf\xb1\x0c\x27\xfe\x38\x14\xc5\x3c\xe3\x6d\xe1\xe8\xbe\x73\x56\xf2\x87\x22\x1c\xc7\x42\x3e\xfb\x93\x78\x22\xee\xca\x52\xab\xf7\x64\x6d\x71\x77\xdf\xf9\x01\x8e\xbd\x87\x40\x9e\x00\x4b\x8b\x6c\x3b\xdd\x8e\x10\x42\x68\x25\x8e\xbe\x89\x8c\x7c\x2f\x10\xaf\xf0\x30\x09\x02\xf1\x14\xf9\x23\x2f\x7a\x11\x9f\xe5\xcb\xbb\xd7\x0e\x5c\x81\xce\x0f\x3a\xbe\x7a\xd1\xe0\x93\x17\xed\x3b\x92\xd0\xff\x92\xc8\x0a\x3c\x2b\xf3\xdc\xc0\x0a\x4f\xc0\xdd\xfe\x87\x5e\x73\x03\xac\xc1\x01\x9f\x9d\x5e\x17\x95\x62\xb4\xf6\xb4\xd8\xfd\xd8\xef\xf7\x2a\x44\xb1\x20\x83\xe7\xc3\x55\xc5\x8c\x11\x1c\xaa\x14\x5c\x55\x8c\xfd\x91\x9c\xc4\xde\xe8\x29\xfe\xb6\x1f\xe6\x51\x0e\xbd\x24\x88\x85\xa1\x4d\xb7\xd7\xe9\x5d\x66\x32\x63\x54\x68\x9c\x86\xfc\xed\x7c\xee\xd4\x48\x0f\xda\xfc\x30\xde\xa3\x23\x39\x94\x91\x0c\x07\xb2\x56\xad\x7e\x25\x58\xbb\x21\x56\x6d\x12\xfc\xae\xe7\xce\x88\x54\xc1\xb4\xd6\x0a\xf9\xdf\xf1\xcf\x45\xe5\x9b\x8f\xfd\x5b\x04\xc2\x6a\x0a\xd6\x82\xa2\xff\x9b\xbe\xe9\x12\xec\xa2\x6d\xcb\x98\xb2\x25\xba\x96\xe2\x6d\xc4\xcf\x20\xc3\x29\xd1\xf2\x8a\x3c\xda\x6d\xc5\x85\x91\xeb\xcc\x60\x84\x1b\x50\xcd\xc9\x72\x82\x62\x9c\x21\x33\xe4\x69\x46\x6a\x47\xd6\x1a\x38\x5b\x00\x37\x93\xf4\xeb\xdd\xc3\x68\x1d\x94\x0c\xc6\xb5\xb8\x27\x49\xfc\xc7\x46\xeb\xfc\xbc\x67\x8e\x26\x65\x30\x8a\x56\xe9\xee\x6f\xd1\xad\x63\xd3\x69\x97\x37\xa8\xdf\x1e\xd3\xb4\x31\x47\xa9\xd5\x16\x5a\x87\x89\x71\x4b\xc0\x4f\xa9\x74\x6d\xc6\xca\x29\x03\xa7\xc9\xfc\x39\x57\x64\x54\x1a\xc7\xdb\x2b\xa8\x6b\xab\x53\x33\x56\xa0\xd1\x66\x9e\x3a\x5d\xad\x63\xcb\x8d\x39\xd9\xeb\xa8\x7d\x8c\x54\x4e\x3c\xa2\x69\x0d\x2e\x65\x9c\xa7\x86\x9a\x08\xce\x9c\x5e\x1f\x0c\xfb\x30\x1e\x07\xd2\x0b\xcf\x0d\xe9\xb8\xc4\xfd\x48\x98\x5a\x07\xae\xb4\xb7\xb6\xbc\xc5\xfa\xdf\x03\x00\x00\xff\xff\x90\x0c\xf1\x99\xf9\x08\x00\x00")

func _1_initial_schema_up_sql() ([]byte, error) {
	return bindata_read(
		__1_initial_schema_up_sql,
		"1_initial_schema.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_initial_schema.down.sql": _1_initial_schema_down_sql,
	"1_initial_schema.up.sql": _1_initial_schema_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_initial_schema.down.sql": &_bintree_t{_1_initial_schema_down_sql, map[string]*_bintree_t{
	}},
	"1_initial_schema.up.sql": &_bintree_t{_1_initial_schema_up_sql, map[string]*_bintree_t{
	}},
}}
